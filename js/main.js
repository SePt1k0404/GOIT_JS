//_____________________–∑–∞–Ω—è—Ç—Ç—è 1_________________________

// –ù–∞–ø–∏—à—ñ—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä–µ–≥—ñ—Å—Ç—Ä –ø–µ—Ä—à–æ–≥–æ
// —Å–∏–º–≤–æ–ª—É —Ä—è–¥–∫–∞ –∑ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —É –≤–µ—Ä—Ö–Ω—ñ–π.
//const str = "string not starting with capital";

// const str = "string not starting with capital";

// const value = str.replace('s', "S");

// console.log(value);

// –ü–µ—Ä–µ—Ä–æ–±—ñ—Ç—å –Ω–∞–≤–µ–¥–µ–Ω–∏–π –∫–æ–¥ —Ç–∞–∫, —â–æ–± —É –Ω—å–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—è –æ–ø–µ—Ä–∞—Ü—ñ—ó +=, -=, *=, /=, ++, --.
//–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏—Å—è. –ö–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–±–∫–∏:
// let num = 1;
// num = num + 12;
// num = num - 14;
// num = num * 5;
// num = num / 7;
// num = num + 1;
// num = num - 1;

// let num = 1;
// num += 12;
// num -= 14;
// num *= 5;
// num /= 7;
// num += 1;
// num -= 1;


//–®–∞–±–ª–æ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
//–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—Ä–∞–∑—É —Å –ø–æ–º–æ—â—å—é –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
//"Hello, my name is [name], I'm [age] years old and I like [hobby]", –≥–¥–µ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö - –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É


// const name = 'Dan';
// const age = 35;
// const hobby = 'swimming';

// const name = 'Dan';
// const age = 35;
// const hobby = 'swimming';

// let message = `Hello, my name is ${name}, I'm ${age} years old and I like ${hobby}`;
// console.log(message);


// message = "Hello, my name is " + name + ", I'm " + age + " years old and I like " + hobby;
// console.log(message);


// –ü—ñ–¥—Ä–∞—Ö—É–π—Ç–µ —Å—É–º—É —á–∏—Å–µ–ª —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ –≤—ñ–¥ 1 –¥–æ 10 –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É
// for, while —Ç–∞ do...while.
// –ü—ñ–¥–∫–∞–∑–∫–∞: —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –º–∞—î –≤–∏–π—Ç–∏ 55.

// let result = 0;

// for (let i = 1; i <= 10; i += 1 ){
//     result += i;
// }

// let i = 1;
// while (i !== 11) {
//     result += i;
//     i += 1;
// }

// let i = 0;
// do {
//     result += i;
//     i += 1;
// }while(i <= 10)

// console.log(result);

//_____________________/–∑–∞–Ω—è—Ç—Ç—è 1_________________________

// let link = "https://my-site.com/about";

// link += !link.endsWith("/") && link.includes('my-site') ? '/' : '';

// console.log(link);


// const arr = ['8', '11'];

// console.log(arr);

// console.log((Number(arr[0]) + Number(arr[1])) * 2);


//___________________–ú–æ–¥—É–ª—å 3__________________//

// Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª —Ç–∞ ¬´Blues¬ª.
// –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.
// const genres = ;


// const genres = ['Jazz', 'Blues'];
// genres.push('–†–æ–∫-–Ω-—Ä–æ–ª')

// console.log(genres[0]);
// console.log(genres[genres.length - 1]);
// console.log(genres);

// const first = genres.shift();
// console.log(genres);
// console.log(first);
// genres.unshift('Country', 'Reggae')
// console.log(genres);

//splice
// const genres = ['Jazz', 'Blues'];
// genres.splice(genres.length, 0, '–†–æ–∫-–Ω-—Ä–æ–ª')
// console.log(genres.splice(0, 1)[0]);
// genres.splice(0, 0, 'Country', 'Reggae')
// console.log(genres);




// Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º
// –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª —Ç–∞ ¬´Blues¬ª.
// –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª¬ª –¥–æ –∫—ñ–Ω—Ü—è.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.
// –í–∏–≤–µ–¥—ñ—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
// –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// –í—Å—Ç–∞–≤—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggae¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.

// const genres = ['Jazz', 'Blues'];
// console.table(genres);
// genres.push('–†–æ–∫-–Ω-—Ä–æ–ª');
// console.table(genres);

// console.log(genres[0]);
// console.log(genres[genres.length - 1]);
// console.log(genres.splice(0, 1));
// console.log(genres);
// genres.unshift('Country', 'Reggae');
// console.log(genres);



// Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// const values = '8 11';
// console.log(values[0]);
// console.log(values[1]);
// // Array -> arr
// const arr = values.split(' ');
// const result = arr[0] * arr[1]
// console.log(result);




// Example 2 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// const values = '8 11';
// const arr = values.split(' ');
// console.log(arr);
// const result = arr[0] * arr[1];
// console.log(result);

//–ü–µ—Ä–∏–º–µ—Ç—Ä

//–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –¥–æ Number
// const values = '8 11';
// const arr = values.split(' ');
// for (let i = 0; i < arr.length; i += 1){
//     arr[i] = Number(arr[i]);
// }
// const result = (arr[0] + arr[1]) * 2;
// console.log(result);

//–ë–µ–∑ —è–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –¥–æ Number
// const values = '8 11';
// const arr = values.split(' ');
// const result = arr[0] * 2 + arr[1] * 2;
// console.log(result);




// Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
// for (let i = 0; i < fruits.length; i+=1){
//     console.log(`–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞: ${i + 1} –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ ${fruits[i]}`);
// }
// console.log('-------------------------------');
// for (let i = 0, n = 1; i < fruits.length; i += 1, n += 1) {
//     console.log(`–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞: ${n} –∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ ${fruits[i]}`);
// }



// Example 3 - –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let i = 0; i < fruits.length; i += 1){
//     console.log(`–ù–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞ ${i + 1}: ${fruits[i]}`);
// }



// Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// const names = 'Jacob,William,Solomon,Artem';
// const phones = '89001234567,89001112233,890055566377,890055566300';
// const namesToArr = names.split(',');
// const phonesToArr = phones.split(',');
// console.log(namesToArr);
// console.log(phonesToArr);

// for (let i = 0; i < namesToArr.length; i +=1){
//     console.log(`${namesToArr[i]} - ${phonesToArr[i]}`);
// }

// for (let i = 0; i < namesToArr.length && i < phonesToArr.length; i +=1){
//     console.log(`${namesToArr[i]} - ${phonesToArr[i]}`);
// }


// Example 4 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ü–∏–∫–ª–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// const names = 'Jacob,William,Solomon,Artem';
// const phones = '89001234567,89001112233,890055566377,890055566300';

// const namesToArr = names.split(',');
// const phonesToArr = phones.split(',');

// for (let i = 0; i < namesToArr.length && i < phonesToArr.length; i += 1){
//     console.log(namesToArr[i], ": ", phonesToArr[i]);
// }





// Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// const string = 'Welcome to the future';
// const arr = string.split(' ');
// const first = arr.shift();
// const last = arr.pop();
// const result = arr.join(' ')
// console.log(result);
// console.log('first', first);
// console.log('last', last);



// Example 5 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.

// const string = 'Welcome to the future';
// const arr = string.split(' ');
// arr.pop();
// arr.shift();
// const result = arr.join(' ');
// console.log(result);

// const string = 'Welcome to the future';
// const arr = string.split(' ');
// console.log(arr.splice(0, 1)[0]);
// console.log(arr.splice(arr.length - 1 , 1)[0]);
// console.log(arr.join(' '));

// Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
// const string = 'Welcome to the future';
// const SEPARATOR = '';
// const result = string.split(SEPARATOR).reverse().join(SEPARATOR);
// console.log(result);

// const string = 'Welcome, to the - future';
// const separators = [',', '-'];
// const SEPARATOR = '';
// const result = string.split(SEPARATOR);

// for (let i = 0; i < result.length; i += 1) {
//     if (separators.includes(result[i])) {
//         result.splice(i, 1)
//     }
// }
// const arr = result.join(SEPARATOR).replaceAll('  ', ' ').split(' ');

// for (let i = 0; i < arr.length; i += 1) {
//     const item = arr[i].split(SEPARATOR).reverse().join(SEPARATOR)
//     arr[i] = item
// }
// console.log(arr.join(' '));



// Example 6 - –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';
// const result = string.split('');
// const res = [];
// for (let i = result.length - 1; i >= 0; i -= 1){
//     res.push(result[i]);
// }

// console.log(res.join(''));

// const string = 'Welcome to the future';
// const result = string.split('').reverse().join('');
// console.log(result);


// Example 7 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —ñ–∑ —Ü–∏–∫–ª–æ–º
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é –µ–ª–µ–º–µ–Ω—Ç–∞.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// const result = [];

// const exm = [...langs].sort((a, b) => a.localeCompare(b))
// console.log('example', exm);

// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];
//     for (let j = i; j < langs.length; j += 1) {
//         if (max > langs[j] && !result.includes(langs[j])) {
//             max = langs[j];
//         }
//     }
//     result.push(max)
// }
// console.log(result);

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// const result = [];

// console.log(langs);

// const exm = [...langs].sort((a, b) => a.localeCompare(b))
// console.log('example', exm);

// for (let i = 0; i < langs.length; i += 1){
//     let max = langs[i];
//     for (let j = i; j < langs.length; j += 1){
//         if (max > langs[j]) {
//             max = langs[j];
//         }
//     }
//     i = -1;
//     langs.splice(langs.indexOf(max), 1);
//     result.push(max);
// }
// console.log('result:', result);


// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// const result = [];

// console.log('start', langs);

// for (let i = 0; i < langs.length; i += 1){
//     let max = langs[i];
//     for (let j = 0; j < langs.length; j += 1){
//         if (max > langs[j] && !result.includes(langs[j])) {
//             max = langs[j];
//             i = -1;
//         }
//     }
//     if (!result.includes(max)) {
//         result.push(max);
//     }
// }
// console.log('start', langs);
// console.log('result', result);

// Example 8 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

// const numbers = [2, 17, 94, 1, 23, 37];
// let min = numbers[0];

// for (const number of numbers) {
//     if (min > number) {
//         min = number;
//     }
// }
// console.log(min); // 1


// Example 8 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

// const numbers = [22, 17, 94, 21, 23, 37];

// let min = numbers[0];

// for (let i = 0; i < numbers.length; i += 1){
//     if (numbers[i] < min) {
//         min = numbers[i];
//     }
// }
// console.log(min);


// const numbers = [22, 17, 94, 21, 23, 37];
// let min = numbers[0], max = numbers[0];

// for (const number of numbers) {
//     if (number < min) {
//         min = number;
//     }
//     if(number > max){
//         max = number;
//     }
// }
// console.log("min: ", min, "max: ", max);
//___________________/–ú–æ–¥—É–ª—å 3__________________//


//___________________–ú–æ–¥—É–ª—å 4__________________//




//!___________________/–ú–æ–¥—É–ª—å 3__________________//


//!___________________–ú–æ–¥—É–ª—å 4__________________//


// https://developer.mozilla.org/en-US/docs/Glossary/Hoisting
// Example 9  —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ + JS Docs

// const a = [1, 2, 3];
// const b = a;

// function foo() {
// console.log(arguments);
// }

// foo(1, 2, 3);
// foo(1, 2, 3, 4, 5);
// foo(1);



// function foo(a) {

// }

// foo(1)



// expression


// const foo = function (a, b, c) {
//     console.log('1', a);
//     console.log('2', b);
//     console.log('3', c);
// }
// console.log(foo(3, 2, 1));


//declaration

// function foo(a, b, c) {
//     console.log('1', a);
//     console.log('2', b);
//     console.log('3', c);
// }

// console.log(foo(3, 2, 1));





/** */

/**  - –≤–∏–∫–ª–∏–∫ JS DOCK comment - –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü—ñ—î—é (–ø—Ä–æ–ø–∏—Å—É–∂—Ç—å—Å—è –ª–∏—à–µ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó)

// /**
//  * Add value
//  * @param {Number} a
//  * @param {Number} b
//  * @param {Number} c
//  * @returns {Number} Summ
//  */
// function add(a, b, c) {
//     const maxValue = 10;
//     const summ = a + b + c;
//     let message;

//     if (summ > maxValue) {
//         message = '–ë—ñ–ª—å—à–µ'
//     } else {
//         message = '–ú–µ–Ω—å—à–µ'
//     }

//     return message;
// }

// console.log('3, 2, 1', add(3, 2, 1));
// console.log('32, 1, 5', add(32, 1, 5));

// –ü–∞—Ç–µ—Ä–Ω –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
// function add(a, b, c) {
//     const maxValue = 10;
//     const summ = a + b + c;

//     if (summ > maxValue) {
//         return '–ë—ñ–ª—å—à–µ'
//     }

//     return '–ú–µ–Ω—å—à–µ';
// }
// console.log(add(3, 2, 1));
// console.log('3, 2, 1', add(3, 2, 1));
// console.log('32, 1, 5', add(32, 1, 5));





// function foo() {
// for (let i = 0; i < arguments.length; i += 1) {
//     console.log(arguments[i]);
// }
// console.log(arguments);
// for(const arg of arguments){
//     console.log(arg);
// }
// console.log(arguments);
// for (let i = 0; i < arguments.length; i += 1) {
//     console.log(arguments[i]);
// }
// const arr = Array.from(arguments);
// console.log(arr);
// const arr = [...arguments]
// console.log(typeof arguments);
// console.log(Array.isArray(arguments));
// console.log(typeof arr);
// console.log(Array.isArray(arr));
// }

// foo(1, 2, 3);
// foo(1, 2, 3, 4, 5);
// foo(false);


// function add(a = 0, b = 0, c = 0) {
//     console.log('c', c);
//     console.log('b', b);
//     console.log('a', a);
//     return a + b + c
// }

// console.log(add(1, 2, 3));
// console.log(add(1, 2));
// console.log(add(1));
// console.log(add());


// –ü–µ—Ä–µ—Ä–≤–∞ –¥–æ 21.15





// if (true) {
//     var example = 1;
// }
// v


// function foo(){
//     var example = 1;
// }
// foo()
// console.log(example);



// const example = 1;

// let b = 3;
// function foo(a) {
//     console.log('a', a);
//     a = 99;
//     console.log('a', a);
//     // a = 12
//     // const example = 2;
//     // console.log(example);
//     // console.log(a);
// }
// foo(b)
// console.log('b',b);
// console.log(a);
// console.log(example);


// const b = [1, 2, 3];
// function foo(a) {
//     // a = Array.from(a)
//     // a = [...a];
//     console.log('a', a);
//     a.splice(1, 1)
//     //

//     console.log('a', a);
//     console.log(a === b);
// }
// foo(b)
// console.log('b', b);


// function showResult(a, b, c) {
//     const maxValue = 10;


//     if (add(a, b, c) > maxValue) {
//         return '–ë—ñ–ª—å—à–µ'
//     }

//     return '–ú–µ–Ω—à–µ';
// }


// function add(a, b, c) {
//     return a + b + c;
// }


// console.log(showResult(11, 3, 4));





// Example 1 - –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é calcBMI(weight, height) —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏.–î–ª—è —Ü—å–æ–≥–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –≤–∞–≥—É –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç –≤–∏—Å–æ—Ç–∏ –ª—é–¥–∏–Ω–∏ –≤ –º–µ—Ç—Ä–∞—Ö.

// –í–∞–≥–∞ —Ç–∞ –≤–∏—Å–æ—Ç–∞ –±—É–¥—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —è–∫ —Ä—è–¥–∫–∏.–ù–µ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —É –≤–∏–≥–ª—è–¥—ñ 24.7 –∞–±–æ 24, 7, —Ç–æ–±—Ç–æ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥—Ä–æ–±–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –º–æ–∂–µ –±—É—Ç–∏ –∫–æ–º–∞.

// –Ü–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ –æ–¥–Ω—ñ—î—ó —Ü–∏—Ñ—Ä–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏;


// /**
//  * –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏
//  * @param {String} weight –≤–∞–≥–∞ –æ—Å–æ–±–∏
//  * @param {String} height –∑—Ä—ñ—Å—Ç –æ—Å–æ–±–∏
//  * @returns {Number} —ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞ –ª—é–¥–∏–Ω–∏
//  */
// function calcBMI(weight, height) {
//     weight = Number(weight.replace(',', '.'))
//     height = Number(height.replace(',', '.'))

//     return Number((weight / height ** 2).toFixed(1));
// }

// const bmi = calcBMI('88,3', '1.75');
// const bmi2 = calcBMI('88.3', '1,75');
// console.log(bmi); // 28.8


// function calcBMI(weight, height) {
//     weight = Number(weight.replace(',', '.'));
//     height = Number(height.replace(',', '.'));
//     return (weight / height ** 2).toFixed(1);
// };

// const bmi = calcBMI('88,3', '1.75');
// console.log(bmi); // 28.8
// const bmi2 = calcBMI('88.3', '1,75');
// console.log(bmi2); // 28.8


// Example 2 - –ù–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a —Ç–∞ b.

// /**
//  *
//  * @param {Number} a //first argument
//  * @param {Number} b //second argument
//  * @returns {Number} //result of comparison
//  */
// function min(a, b) {
//     return a > b ? b : a;
// };

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1

// function min(a, b) {
//     let minValue;

//     if (a > b) {
//         minValue = b;
//     } else {
//         minValue = a;
//     }

//     return minValue
// }


// /**
//  * –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª
//  * @param {Number} a
//  * @param {Number} b
//  * @returns {Number || String} –Ω–∞–π–º–µ–Ω—à–µ –∑ —á–∏—Å–ª–æ || –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
//  */
// function min(a, b) {
//     if (a > b) {
//         return b;
//     }

//     return a
// }


// function min(a, b) {
//     return a > b ? b : a;
// }

// console.log(min(2, 5)); // 2
// console.log(min(3, -1)); // -1
// console.log(min(1, 1)); // 1




// Example 3 - –ü–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞.–ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.

// function getRectArea(dimensions) {
//     const result = dimensions.split(' ');
//     return result[0] * result[1];
// };

// const dimensions = '11 8';
// console.log(getRectArea(dimensions));

// /**
//  * O–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
//  * @param {String} dimensions
//  * @returns {Number}
//  */
// function getPerimeter(dimensions) {
//     dimensions = dimensions.split(' ')
//     return 2 * (Number(dimensions[0]) + Number(dimensions[1]))
// }
// // console.log(getPerimeter('8 11'));


// /**
//  * O–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
//  * @param {String} dimensions
//  * @returns {Number}
//  */
// function getRectArea(dimensions) {
//     dimensions = dimensions.split(' ')
//     console.log(dimensions);
//     return Number(dimensions[0]) * Number(dimensions[1]);
// }

// // console.log(getRectArea('8 11'));













// Example 4 - –õ–æ–≥—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª for, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ < –Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞ > - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

//     –ù–∞–ø—Ä–∏–∫–ª–∞–¥ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É ['Mango', 'Poly', 'Ajax'] –∑ —ñ–Ω–¥–µ–∫—Å–æ–º 0 –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ 1 - Mango, –∞ –¥–ª—è —ñ–Ω–¥–µ–∫—Å—É 2 –≤–∏–≤–µ–¥–µ 3 - Ajax.

// function logItems(items) {
//     for (let i = 0; i < items.length; i += 1){
//         console.log(`–ù–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞: ${i + 1} - –ó–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–Ω—Ç–∞: ${items[i]}`);
//     }
// };

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);

// /**
//  * –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
//  * @param {Array} items
//  */
// function logItems(items) {
//     // –Ø–∫—â–æ –¥–≤—ñ—á—ñ —Ç–∞ –±—ñ–ª—å—à–µ –∫–æ–º–ø–µ–Ω—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
//     // for (let i = 0, j = 1; i < items.length; i += 1, j += 1) {
//     //     console.log(`${j} - ${items[i]}`);
//     // }

//     // –Ø–∫—â–æ 1 —Ä–∞–∑ –∫–æ–º–ø–µ–Ω—Å—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞
//     for (let i = 0; i < items.length; i += 1) {
//         console.log(`${i + 1} - ${items[i]}`);
//     }
// }

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);


//     Example 6 - –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
//     –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers)—è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.

//     function findLargestNumber(numbers) { }

//     console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
//     console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83




// function findLargestNumber(numbers) {
//     let max = numbers[0];
//     for (let i = 1; i < numbers.length; i += 1){
//         if (max < numbers[i]) {
//             max = numbers[i];
//         }
//     }
//     return max;
// };

//     console.log(findLargestNumber([2, 17, 94, 1, 23, 37])); // 94
//     console.log(findLargestNumber([49, 4, 7, 83, 12])); // 83


// function findSmallestNumber(numbers) {
//     let min = numbers[0];
//     for (let i = 1; i < numbers.length; i += 1){
//         if (min > numbers[i]) {
//             min = numbers[i];
//         }
//     }
//     return min;
// };

//     console.log(findSmallestNumber([2, 17, 94, 1, 23, 37])); // 1
//     console.log(findSmallestNumber([49, 4, 7, 83, 12])); // 4

//     Example 7 - –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
//     –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calAverage() —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö–Ω—î —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è. –£—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –±—É–¥—É—Ç—å –ª–∏—à–µ —á–∏—Å–ª–∞–º–∏.

// function calAverage(...arguments) {
//     let total = 0;
//     for (const arg of arguments) {
//         total += arg;
//     }
//     return total / arguments.length;
// }

// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2

// function calAverage() {
//     let total = 0;

//     for (const num of arguments) {
//         total += num;
//     }

//     return total / arguments.length
// }

// function calAverage() {
//     const arr = Array.from(arguments);
//     let total = 0;

//     for (const num of arr) {
//         total += num;
//     }

//     return total / arr.length
// }


// console.log(calAverage(1, 2, 3, 4)); // 2.5
// console.log(calAverage(14, 8, 2)); // 8
// console.log(calAverage(27, 43, 2, 8, 36)); // 23.2











//     Example 8 - –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
//     –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é formatTime(minutes) —è–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ –∑–Ω–∞—á–µ–Ω–Ω—è minutes (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω) —É —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω —Ç–∞ —Ö–≤–∏–ª–∏–Ω HH:MM.


// function formatTime(minutes) {
//     const hours = Math.floor(minutes / 60);
//     const min = minutes % 60
//     return `${hours.toString().padStart(2, '0')}:${min.toString().padStart(2,'0')}`
// };

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"

// function formatTime(minutes) {
// const hours =  Math.floor(minutes / 60);
// const min = minutes % 60;
// return `${hours.toString().padStart(2,'0')} : ${min.toString().padStart(2,'0')}`
// }

// console.log(formatTime(70)); // "01:10"
// console.log(formatTime(450)); // "07:30"
// console.log(formatTime(1441)); // "24:01"













//     Example 9 - –ö–æ–ª–µ–∫—Ü—ñ—è –∫—É—Ä—Å—ñ–≤ (includes, indexOf, push —ñ —Ç. –¥.)
//     –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ courses:

//     addCourse(name) - –¥–æ–¥–∞—î –∫—É—Ä—Å –¥–æ –∫—ñ–Ω—Ü—è –∫–æ–ª–µ–∫—Ü—ñ—ó
//     removeCourse(name) - –≤–∏–¥–∞–ª—è—î –∫—É—Ä—Å —ñ–∑ –∫–æ–ª–µ–∫—Ü—ñ—ó
//     updateCourse(oldName, newName) - –∑–º—ñ–Ω—é—î —ñ–º'—è –Ω–∞ –Ω–æ–≤–µ

//     addCourse('Express');
//     console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL', 'Express']
//     addCourse('CSS'); // '–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å'

//     removeCourse('React');
//     console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'Express']
//     removeCourse('Vue'); // '–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'

//     updateCourse('Express', 'NestJS');
//     console.log(courses); // ['HTML', 'CSS', 'JavaScript', 'PostgreSQL', 'NestJS']

// const courses = ['HTML', 'CSS', 'JavaScript', 'React', 'PostgreSQL'];


// /**
//  * 
//  * @param {String} name 
//  * @returns {String}
//  */
// function addCourse(name) {
//     if (courses.includes(name)) {
//         return console.log('–í–∏ –≤–∂–µ –º–∞—î—Ç–µ —Ç–∞–∫–∏–π –∫—É—Ä—Å');
//     }
//     return courses.push(name);
// };

// console.log(courses);
// addCourse('Express');
// console.log(courses);
// addCourse('CSS');

// console.log("Case: 2");

// function removeCourse(name) {
//     if (!courses.includes(name)) {
//         return console.log("–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
//     }
//     return courses.splice(courses.indexOf(name), 1);;
// };

// console.log(courses);
// removeCourse('React');
// console.log(courses);
// removeCourse('Vue');
// console.log(courses);

// console.log("Case: 3");

// function updateCourse(oldCourses, newCourses) { 
//      if (!courses.includes(oldCourses)) {
//         return console.log("–ö—É—Ä—Å —ñ–∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
//     }
//     return courses[courses.indexOf(oldCourses)] = newCourses;
// };

// console.log(courses);
// updateCourse('Express', 'NestJS');
// console.log(courses);


// const langs = ["python", "javascript", "c++", "haskel", "php", "ruby"];

// const result = [];

// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];

//     if (result.includes(langs[i])) {
//         continue;
//     }

//     // let max = result.includes(langs[i]) ? 'z' : langs[i];
//     for (let j = 0; j < langs.length; j += 1) {
//         if (max > langs[j] && !result.includes(langs[j])) {
//             max = langs[j];
//             i = -1
//         }
//     }
//     result.push(max)
// }
// console.log('Result: ', result);



// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];
//     for (let j = i; j < langs.length; j += 1) {
//         if (max > langs[j]) {
//             max = langs[j];
//         }
//     }
//     i = -1;
//     langs.splice(langs.indexOf(max), 1);
//     result.push(max);
// }
// console.log('result:', result);

// (—ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É langs):

// const result = [];

// console.log('start', langs);
// let total = 0
// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];
//     for (let j = 0; j < langs.length; j += 1) {
//         if (max > langs[j] && !result.includes(langs[j])) {
//             max = langs[j];
//             i = -1;
//         }
//         total += 1
//     }
//     if (!result.includes(max)) {
//         result.push(max);
//     }
// }
// console.log('start', langs);
// console.log('result', result);
// console.log(total);

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// let total = 0;
// for (let i = 0; i < langs.length - 1; i += 1) {
//     for (let j = i + 1; j < langs.length; j += 1) {
//         if (langs[i] > langs[j]) {
//             let temp = langs[i];
//             langs[i] = langs[j];
//             langs[j] = temp;
//         }
//         total += 1
//     }
// }
// console.log(total);
// console.log(langs);
// const result = []
// let total = 0
// for (let i = 0; i < langs.length; i++) {
//     let addResult = false;

//     for (let j = 0; j < result.length; j++) {
//         if (langs[i] < result[j]) {
//             result.splice(j, 0, langs[i]);
//             addResult = true;
//             total += 1
//             break;
//         }
//         total += 1
//     }
//     if (!addResult) {
//         result.push(langs[i]);
//     }
// }
// console.log(result);
// console.log(total);

// for (let i = 0; i < langs.length; i += 1) {
//     let max = langs[i];
//     let indexToDelete = i;
//     for (let j = i; j < langs.length; j += 1) {
//         if (langs[j] > max) {
//             max = langs[j];
//             indexToDelete = j;
//         }
//         total += 1;
//     }
//     langs.splice(indexToDelete, 1);
//     langs.unshift(max);
// }


// function indexOf(arr, ele) {
//     for (let i = 0; i < arr.length; i += 1) {
//         if (arr[i] === ele) {
//             return i
//         }
//     }
//     return -1
// }


//!___________________/–ú–æ–¥—É–ª—å 4__________________//

